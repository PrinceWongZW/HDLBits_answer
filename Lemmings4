module top_module(
    input clk,
    input areset,    // Freshly brainwashed Lemmings walk left.
    input bump_left,
    input bump_right,
    input ground,
    input dig,
    output walk_left,
    output walk_right,
    output aaah,
    output digging ); 
    
    parameter LEFT = 0, RIGHT = 1, FALLL = 2, FALLR = 3, DIGL = 4, DIGR = 5, ADEAD = 6, DEAD = 7;
    reg [3:0] state, nstate;
    reg [4:0] count;
    
    always @ (*) begin
        case(state)
            LEFT :
                nstate = ground ? (dig ? DIGL : (bump_left ? RIGHT : LEFT)) : FALLL;
            
            RIGHT :
                nstate = ground ? (dig ? DIGR : (bump_right ? LEFT : RIGHT)) : FALLR;
            
            DIGL :
                nstate = ground? state : FALLL;
            
            DIGR :
                nstate = ground? state : FALLR;
            
            FALLL :
                nstate = ground ? LEFT : ((count>=20) ? ADEAD : FALLL);
            
            FALLR :
                nstate = ground ? RIGHT : ((count>=20) ? ADEAD : FALLR);
            
            ADEAD :
                nstate = ground ? DEAD : ADEAD;
            
            DEAD :
                nstate = DEAD;
        endcase
    end
    
    always @ (posedge clk, posedge areset) begin
        if(areset)
            state <= LEFT;
        else begin
            state <= nstate;
            if(nstate==FALLL || nstate==FALLR)
                count <= count==20 ? 20 : (count+1);
            else
                count <= 0;
        end
    end
    
    assign walk_left = state==LEFT;
    assign walk_right = state==RIGHT;
    assign aaah = (state==FALLL || state==FALLR || state==ADEAD);
    assign digging = (state==DIGL) || (state==DIGR);

endmodule
